<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on Terminal</title>
    <link>https://caiwp.github.io/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 Jul 2020 14:49:21 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux命令nc</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4nc/</link>
      <pubDate>Thu, 09 Jul 2020 14:49:21 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4nc/</guid>
      <description>参考链接
https://www.ifmicro.com/记录/2017/12/12/netcat-usage/
https://www.runoob.com/linux/linux-comm-nc.html
# 端口扫描 nc 127.0.0.1 -z 9320-9330  </description>
    </item>
    
    <item>
      <title>Sed命令</title>
      <link>https://caiwp.github.io/post/sed%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 08 May 2020 15:20:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/sed%E5%91%BD%E4%BB%A4/</guid>
      <description>参考链接 https://www.runoob.com/linux/linux-comm-sed.html
直接替换文件内容 sed -i &#39;s/108/581/g&#39; *.json 在每行的头添加字符，比如&amp;quot;HEAD&amp;quot;，命令如下： sed &#39;s/^/HEAD&amp;amp;/g&#39; test.file 在每行的行尾添加字符，比如“TAIL”，命令如下： sed &#39;s/$/&amp;amp;TAIL/g&#39; test.file 替换第2个值 sed -i &#39;s/108/581/2&#39; test.sh  </description>
    </item>
    
    <item>
      <title>Git提交规范</title>
      <link>https://caiwp.github.io/post/git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 22 Apr 2020 17:54:52 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</guid>
      <description>参考链接 https://juejin.im/post/5afc5242f265da0b7f44bee4
type: commit 的类型 feat: 新特性 fix: 修改问题 refactor: 代码重构 docs: 文档修改 style: 代码格式修改, 注意不是 css 修改 test: 测试用例修改 chore: 其他修改, 比如构建流程, 依赖管理. scope: commit 影响的范围, 比如: route, component, utils, build... subject: commit 的概述, 建议符合 [50/72 formatting](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting) body: commit 具体修改内容, 可以分为多行, 建议符合 [50/72 formatting](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting) footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.  </description>
    </item>
    
    <item>
      <title>Goroutine请求TCP返回读取问题</title>
      <link>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Apr 2020 15:16:48 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</guid>
      <description>场景：
0、本服务是一个 TCP 服务监听接收请求 1、需要与某个远程服务建立 TCP 连接。 2、建立唯一的客户端C并保持连接。 3、多个请求与本服务建立 TCP 连接产生多个 goroutine。 4、当 goroutine 需要涉及到远程服务调用客户端C进行 Write 和 Read 操作。每个应当是独立不干扰的。 5、出现 Read 操作时数据并不按预期返回，随着 goroutine 数量增多出现概率变大。  定位问题：应该是多goroutine并发读取socket缓冲区数据导致。
解决：
A、设想通过 channel 来避免并发。复杂度增加，需要对应将结果与请求对应，并且个别地方是阻塞请求。 B、加锁控制。简单粗暴，加好超时控制避免死锁情况。  </description>
    </item>
    
    <item>
      <title>Git推送多个仓库</title>
      <link>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 09 Apr 2020 17:57:16 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</guid>
      <description>参考链接 https://segmentfault.com/a/1190000011294144
git remote -v git remote add xxxx http://gogit.oa.com/WenpiCai/sicbo.git git push -u xxxx master  </description>
    </item>
    
    <item>
      <title>快速删除</title>
      <link>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</link>
      <pubDate>Thu, 09 Apr 2020 11:17:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</guid>
      <description>参考链接 https://blog.csdn.net/liuxiao723846/article/details/51626305
1）先建立一个空目录
mkdir/data/blank
2）用rsync删除目标目录
rsync &amp;ndash;delete-before -d /data/blank/ /var/spool/clientmqueue/</description>
    </item>
    
    <item>
      <title>Golang指定时区</title>
      <link>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Tue, 07 Apr 2020 16:54:04 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</guid>
      <description>参考链接 https://stackoverflow.com/questions/27991671/how-to-get-the-current-timestamp-in-other-timezones-in-golang
//init the loc loc, _ := time.LoadLocation(&amp;quot;Asia/Shanghai&amp;quot;) //set timezone, now := time.Now().In(loc)  </description>
    </item>
    
    <item>
      <title>Golang信号发送与接收</title>
      <link>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Fri, 27 Dec 2019 15:37:56 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid>
      <description>参考链接 https://stackoverflow.com/questions/40498371/how-to-send-an-interrupt-signal-in-golang
在需要关闭程序时发送信号
syscall.Kill(syscall.Getpid(), syscall.SIGINT)  接收信号
var stopChan = make(chan os.Signal, 2) signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT) &amp;lt;-stopChan // wait for SIGINT  </description>
    </item>
    
    <item>
      <title>Golang整数范围</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 12 Nov 2019 10:25:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</guid>
      <description>参考链接 https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1
The germane part:
 Since integer types use two&amp;rsquo;s complement arithmetic, you can infer the min/max constant values for int and uint. For example,
&amp;gt; const MaxUint = ^uint(0) &amp;gt; const MinUint = 0 &amp;gt; const MaxInt = int(MaxUint &amp;gt;&amp;gt; 1) &amp;gt; const MinInt = -MaxInt - 1 &amp;gt; ``` As per @CarelZA&#39;s comment:  golang uint8 : 0 to 255 uint16 : 0 to 65535 uint32 : 0 to 4294967295 uint64 : 0 to 18446744073709551615 int8 : -128 to 127 int16 : -32768 to 32767 int32 : -2147483648 to 2147483647 int64 : -9223372036854775808 to 9223372036854775807 ```</description>
    </item>
    
    <item>
      <title>Golang数组复制</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 07 Nov 2019 10:44:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</guid>
      <description>参考链接 https://www.geeksforgeeks.org/how-to-copy-an-array-into-another-array-in-golang/
// creating a copy of an array by value arr := arr1 // Creating a copy of an array by reference arr := &amp;amp;arr1  两种方式结果不一样，第一种原值不变，第二种会导致原值也跟着改变</description>
    </item>
    
    <item>
      <title>Linux命令sort</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</link>
      <pubDate>Tue, 05 Nov 2019 15:45:00 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</guid>
      <description>参考链接 https://www.cnblogs.com/coderchuanyu/p/4194211.html
忽略相同行使用-u选项或者uniq
只显示单一行： uniq -u file.txt sort file.txt | uniq -u 统计各行在文件中出现的次数： sort file.txt | uniq -c 在文件中找出重复的行： sort file.txt | uniq -d  </description>
    </item>
    
    <item>
      <title>Linux命令awk</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</link>
      <pubDate>Tue, 05 Nov 2019 15:44:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</guid>
      <description>参考链接 https://www.runoob.com/linux/linux-comm-awk.html
每行按空格或TAB分割，输出文本中的1、4项 awk &#39;{print $1,$4}&#39; log.txt 使用&amp;quot;,&amp;quot;分割 awk -F, &#39;{print $1,$2}&#39; log.txt if 条件 awk &#39;{if ($1==1) print &amp;quot;A&amp;quot;; else if ($1==2) print &amp;quot;B&amp;quot;; else print &amp;quot;C&amp;quot;}&#39;  </description>
    </item>
    
    <item>
      <title>Linux命令pkill</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</link>
      <pubDate>Fri, 01 Nov 2019 15:47:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</guid>
      <description>https://man.linuxde.net/pkill
pkill命令可以按照进程名杀死进程。会全部杀掉。
pkill (选项) (参数) -o：仅向找到的最小（起始）进程号发送信号； -n：仅向找到的最大（结束）进程号发送信号； -P：指定父进程号发送信号； -g：指定进程组； -t：指定开启进程的终端。  </description>
    </item>
    
    <item>
      <title>Linux命令pgrep</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</link>
      <pubDate>Fri, 01 Nov 2019 15:30:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</guid>
      <description>https://man.linuxde.net/pgrep
pgrep (选项) (参数) -o：仅显示找到的最小（起始）进程号； -n：仅显示找到的最大（结束）进程号； -l：显示进程名称； -P：指定父进程号； -g：指定进程组； -t：指定开启进程的终端； -u：指定进程的有效用户ID。  </description>
    </item>
    
    <item>
      <title>Mysql创建用户</title>
      <link>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</link>
      <pubDate>Thu, 31 Oct 2019 17:53:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</guid>
      <description>https://www.cnblogs.com/chanshuyi/p/mysql_user_mng.html
创建用户 create user zhangsan identified by &#39;zhangsan&#39;; 开权限 grant all privileges on zhangsanDb.* to zhangsan@&#39;%&#39; identified by &#39;zhangsan&#39;; flush privileges; 查看权限 show grants for &#39;zhangsan&#39;; 更新密码 update mysql.user set password = password(&#39;zhangsannew&#39;) where user = &#39;zhangsan&#39; and host = &#39;%&#39;; flush privileges; 删除用户 drop user zhangsan@&#39;%&#39;;  </description>
    </item>
    
    <item>
      <title>Go比较float</title>
      <link>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</link>
      <pubDate>Thu, 31 Oct 2019 16:11:19 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</guid>
      <description> 直接比较是会有坑，需要进行减去取绝对值的有效范围如
func almostEqual(a, b float64) bool { return math.Abs(a-b) &amp;lt;= 0.001 }   </description>
    </item>
    
    <item>
      <title>Golang 利用 pprof 定位问题</title>
      <link>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 15:40:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</guid>
      <description>在代码中引入 _ &amp;ldquo;net/http/pprof&amp;rdquo; 并监听 http 服务后
通过终端查看 go tool pprof http://127.0.0.1:9191/debug/pprof/heap 通过浏览器查看 http://127.0.0.1:9191/debug/pprof/  </description>
    </item>
    
  </channel>
</rss>