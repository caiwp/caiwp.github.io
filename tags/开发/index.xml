<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on Terminal</title>
    <link>https://caiwp.github.io/tags/%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 开发 on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Dec 2019 14:47:34 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/tags/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记goroutine泄露</title>
      <link>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Mon, 23 Dec 2019 14:47:34 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>程序说明 监听 TCP 与 UDP 服务，TCP 服务保持客户端长连接，UDP 服务由业务端调用发消息到客户端。
发现问题 通过监控系统发现 goroutine 数量居高不下，正常情况下是一个用户一个 goroutine 才是，明显出现了异常情况。
定位问题 这种情况应该是次 goroutine 泄露现象，需要知道哪个位置导致的。
初步猜测 TCP 连接断开重连导致，翻看日志，看到存在很多高频率重连，只是不符合导致暴涨现象。
回头直接看 goroutine 占用情况，方式 https://caiwp.github.io/post/golang利用pprof定位问题/
原因也就一目了然，是 UDP 服务发全服消息时调用的 goroutine 无法执行结束。
上代码
// Handle 执行 func (t *UdpTransport) Handle(ctx context.Context, addr net.Addr, reader *Reader) { ctx, cancel := context.WithTimeout(ctx, 5*time.Second) defer cancel() ch := make(chan struct{}, 0) go func() { t.run(ctx, addr, reader) ch &amp;lt;- struct{}{} // ERROR 会堵在这 }() select { case &amp;lt;-ch: case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>火焰图</title>
      <link>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:00:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description> 安装 安装基本工具 git clone https://github.com/brendangregg/FlameGraph.git cp flamegraph.pl /usr/local/bin/ flamegraph.pl -h go get -v -u github.com/uber/go-torch go-torch -h brew install graphviz  使用 代码监听 http 服务 _ &amp;quot;net/http/pprof&amp;quot;  压测 # TODO 不同服务不同操作  压测同时获取数据 go-torch -u http://localhost:9191 -t 30  </description>
    </item>
    
  </channel>
</rss>