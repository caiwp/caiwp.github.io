<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Terminal</title>
    <link>https://caiwp.github.io/tags/go/</link>
    <description>Recent content in Go on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Apr 2020 16:54:04 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang指定时区</title>
      <link>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Tue, 07 Apr 2020 16:54:04 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</guid>
      <description>参考链接 https://stackoverflow.com/questions/27991671/how-to-get-the-current-timestamp-in-other-timezones-in-golang
//init the loc loc, _ := time.LoadLocation(&amp;quot;Asia/Shanghai&amp;quot;) //set timezone, now := time.Now().In(loc)  </description>
    </item>
    
    <item>
      <title>Golang信号发送与接收</title>
      <link>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Fri, 27 Dec 2019 15:37:56 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid>
      <description>参考链接 https://stackoverflow.com/questions/40498371/how-to-send-an-interrupt-signal-in-golang
在需要关闭程序时发送信号
syscall.Kill(syscall.Getpid(), syscall.SIGINT)  接收信号
var stopChan = make(chan os.Signal, 2) signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT) &amp;lt;-stopChan // wait for SIGINT  </description>
    </item>
    
    <item>
      <title>记goroutine泄露</title>
      <link>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Mon, 23 Dec 2019 14:47:34 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>程序说明 监听 TCP 与 UDP 服务，TCP 服务保持客户端长连接，UDP 服务由业务端调用发消息到客户端。
发现问题 通过监控系统发现 goroutine 数量居高不下，正常情况下是一个用户一个 goroutine 才是，明显出现了异常情况。
定位问题 这种情况应该是次 goroutine 泄露现象，需要知道哪个位置导致的。
初步猜测 TCP 连接断开重连导致，翻看日志，看到存在很多高频率重连，只是不符合导致暴涨现象。
回头直接看 goroutine 占用情况，方式 https://caiwp.github.io/post/golang利用pprof定位问题/
原因也就一目了然，是 UDP 服务发全服消息时调用的 goroutine 无法执行结束。
上代码
// Handle 执行 func (t *UdpTransport) Handle(ctx context.Context, addr net.Addr, reader *Reader) { ctx, cancel := context.WithTimeout(ctx, 5*time.Second) defer cancel() ch := make(chan struct{}, 0) go func() { t.run(ctx, addr, reader) ch &amp;lt;- struct{}{} // ERROR 会堵在这 }() select { case &amp;lt;-ch: case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>Golang整数范围</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 12 Nov 2019 10:25:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</guid>
      <description>参考链接 https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1
The germane part:
 Since integer types use two&amp;rsquo;s complement arithmetic, you can infer the min/max constant values for int and uint. For example,
&amp;gt; const MaxUint = ^uint(0) &amp;gt; const MinUint = 0 &amp;gt; const MaxInt = int(MaxUint &amp;gt;&amp;gt; 1) &amp;gt; const MinInt = -MaxInt - 1 &amp;gt; ``` As per @CarelZA&#39;s comment:  golang uint8 : 0 to 255 uint16 : 0 to 65535 uint32 : 0 to 4294967295 uint64 : 0 to 18446744073709551615 int8 : -128 to 127 int16 : -32768 to 32767 int32 : -2147483648 to 2147483647 int64 : -9223372036854775808 to 9223372036854775807 ```</description>
    </item>
    
    <item>
      <title>Golang数组复制</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 07 Nov 2019 10:44:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</guid>
      <description>参考链接 https://www.geeksforgeeks.org/how-to-copy-an-array-into-another-array-in-golang/
// creating a copy of an array by value arr := arr1 // Creating a copy of an array by reference arr := &amp;amp;arr1  两种方式结果不一样，第一种原值不变，第二种会导致原值也跟着改变</description>
    </item>
    
    <item>
      <title>Go比较float</title>
      <link>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</link>
      <pubDate>Thu, 31 Oct 2019 16:11:19 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</guid>
      <description> 直接比较是会有坑，需要进行减去取绝对值的有效范围如
func almostEqual(a, b float64) bool { return math.Abs(a-b) &amp;lt;= 0.001 }   </description>
    </item>
    
    <item>
      <title>Golang 利用 pprof 定位问题</title>
      <link>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 15:40:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</guid>
      <description>在代码中引入 _ &amp;ldquo;net/http/pprof&amp;rdquo; 并监听 http 服务后
通过终端查看 go tool pprof http://127.0.0.1:9191/debug/pprof/heap 通过浏览器查看 http://127.0.0.1:9191/debug/pprof/  </description>
    </item>
    
    <item>
      <title>火焰图</title>
      <link>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:00:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description> 安装 安装基本工具 git clone https://github.com/brendangregg/FlameGraph.git cp flamegraph.pl /usr/local/bin/ flamegraph.pl -h go get -v -u github.com/uber/go-torch go-torch -h brew install graphviz  使用 代码监听 http 服务 _ &amp;quot;net/http/pprof&amp;quot;  压测 # TODO 不同服务不同操作  压测同时获取数据 go-torch -u http://localhost:9191 -t 30  </description>
    </item>
    
  </channel>
</rss>