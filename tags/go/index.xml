<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Terminal</title>
    <link>https://caiwp.github.io/tags/go/</link>
    <description>Recent content in Go on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Jan 2021 10:13:40 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang内存占用检测</title>
      <link>https://caiwp.github.io/post/golang%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Thu, 14 Jan 2021 10:13:40 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%A3%80%E6%B5%8B/</guid>
      <description>Golang 内存占用检测 参考链接 https://lrita.github.io/2017/05/26/golang-memory-pprof/
涉及命令 go tool pprof http://{host}/debug/pprof/heap
缘由 同样的服务在上了多组服务器后监控显示内存 process_resident_memory_bytes 区别很大，多组服务会根据实际连接和用户情况增减，但有一组数值仍然居高不下，数据对比就是20+M和50+M。以下便找出两台作为对比定位原因。{host1}为需要检测的服务。
命令使用 通过 go tool pprof http://{host}/debug/pprof/heap 进入查看命令行，直接输入 top 后
[WenpiCai@LOCAL-192-168-97-55 ~]$ go tool pprof http://{host1}/debug/pprof/heap Fetching profile over HTTP from http://{host1}/debug/pprof/heap Saved profile in /home/WenpiCai/pprof/pprof.MoziGateA.alloc_objects.alloc_space.inuse_objects.inuse_space.006.pb.gz File: MoziGateA Type: inuse_space Time: Jan 14, 2021 at 10:26am (CST) Entering interactive mode (type &amp;quot;help&amp;quot; for commands, &amp;quot;o&amp;quot; for options) (pprof) top Showing nodes accounting for 5524.47kB, 100% of 5524.47kB total Showing top 10 nodes out of 41 flat flat% sum% cum cum% 1542.</description>
    </item>
    
    <item>
      <title>小游戏重构之路</title>
      <link>https://caiwp.github.io/post/%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Mon, 09 Nov 2020 17:40:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/</guid>
      <description> 小游戏重构之路  记录一下重构小游戏过程中的体会。 重构开发语言 Golang，额外涉及开发语言PHP，C++  前景  接手小游戏重构有骰宝、大菠萝、夺宝奇兵，虽然各种原因没有上线，或上线验证后出现问题暂停上线状态。 轻量支撑服务有小喇叭、大厅代理层，已上线正常使用。 只是服务端部分重构。  场景 重构缘由  服务老化，维护成本大。稳定的项目没人愿意去调整，大部分时间就处理搁置状态了，只是个别时候在需要加点东西的时候就麻烦来了。可能这个项目的核心用了好几年前的一个技术，如 swoole 1.8.x 版本，某些时间要解决问题只能使用绝招“重启大法”。能用可用，但难以维护这样的状态。 折腾心理。某些时候需求不饱和前提下，就闲得慌蛋疼，想整点东西，而能为现有项目提供价值是更好了。 学习目的。站在巨人肩膀上可望得更远，虽然攀登过程需要披荆斩棘。  开发语言  做为PHP出身的程序员难免不想囚困于web领域。 Golang 能让我体会到开发过程中的轻松感。 大部分时间都处于自撸项目，所以不需要见识千奇百怪的代码风格，毕竟项目的复杂度就是因人而生。有人的地方就有江湖！！！ 自知 C++ 只能读出思路的程度。  历程 读 因为不是从0到1，所以必须基于原有的套路上进行，毕竟纯粹的服务端重构，需要保证与客户端的数据一致性。
整个历程里面这部分是最难受的，项目一般年久失修，可能仅有原有源码。这部分也是最耗时的，虽然有的服务眼看是只有几个功能如下注、结算、发奖，但数据是不会撒谎，数据有出入那结果就异常。
最重要的是需要一颗包容的心，骂x多了难免麻木。话虽如此，意仍难平，江湖如此，身不由已！
写 Golang 的优势就是轻量，不用像 PHP 那样凡事先搬出个框架，不过服务写得多了也会自成框架。框架模型元素大体整理有
 入口，服务端、客户端等。 功能模块，日志、配置、指标、DB、缓存、基于自有协议服务客户端如用户、上报等。 业务逻辑，路由控制，具体实现。 脚本，编译、发布等  试 不喜欢等所有东西都实现了才进行测试，没那耐心，一般测试难免存在遗漏，亡羊补牢即使能管用但肯定会痛苦。拆分化开发和测试，有坑早点填，也趁早安心。
此外，重构都是换语言进行，不同语言开发思路差异化还是很大的。如果进行直翻，那简直就是种了棵树苗在心口，一时间不起眼就吸引掉所有阳光，眼望它在那灿烂。
问题 语言 换语言重构最大问题就在于尽可能的使用适合的方式，Go、PHP、C++ 三个不必进行比较，道路千万条，适合了才会舒服。
Go 小游戏基本上数据都是有状态的，当 goroutine 不受约束，惊喜就会不期而至，必须心怀敬畏啊。
意义 </description>
    </item>
    
    <item>
      <title>Goroutine请求TCP返回读取问题</title>
      <link>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Apr 2020 15:16:48 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</guid>
      <description>场景：
0、本服务是一个 TCP 服务监听接收请求 1、需要与某个远程服务建立 TCP 连接。 2、建立唯一的客户端C并保持连接。 3、多个请求与本服务建立 TCP 连接产生多个 goroutine。 4、当 goroutine 需要涉及到远程服务调用客户端C进行 Write 和 Read 操作。每个应当是独立不干扰的。 5、出现 Read 操作时数据并不按预期返回，随着 goroutine 数量增多出现概率变大。  定位问题：应该是多goroutine并发读取socket缓冲区数据导致。
解决：
A、设想通过 channel 来避免并发。复杂度增加，需要对应将结果与请求对应，并且个别地方是阻塞请求。 B、加锁控制。简单粗暴，加好超时控制避免死锁情况。  </description>
    </item>
    
    <item>
      <title>Golang指定时区</title>
      <link>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Tue, 07 Apr 2020 16:54:04 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</guid>
      <description>参考链接 https://stackoverflow.com/questions/27991671/how-to-get-the-current-timestamp-in-other-timezones-in-golang
//init the loc loc, _ := time.LoadLocation(&amp;quot;Asia/Shanghai&amp;quot;) //set timezone, now := time.Now().In(loc)  </description>
    </item>
    
    <item>
      <title>Golang信号发送与接收</title>
      <link>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Fri, 27 Dec 2019 15:37:56 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid>
      <description>参考链接 https://stackoverflow.com/questions/40498371/how-to-send-an-interrupt-signal-in-golang
在需要关闭程序时发送信号
syscall.Kill(syscall.Getpid(), syscall.SIGINT)  接收信号
var stopChan = make(chan os.Signal, 2) signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT) &amp;lt;-stopChan // wait for SIGINT  </description>
    </item>
    
    <item>
      <title>记goroutine泄露</title>
      <link>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Mon, 23 Dec 2019 14:47:34 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>程序说明 监听 TCP 与 UDP 服务，TCP 服务保持客户端长连接，UDP 服务由业务端调用发消息到客户端。
发现问题 通过监控系统发现 goroutine 数量居高不下，正常情况下是一个用户一个 goroutine 才是，明显出现了异常情况。
定位问题 这种情况应该是次 goroutine 泄露现象，需要知道哪个位置导致的。
初步猜测 TCP 连接断开重连导致，翻看日志，看到存在很多高频率重连，只是不符合导致暴涨现象。
回头直接看 goroutine 占用情况，方式 https://caiwp.github.io/post/golang利用pprof定位问题/
原因也就一目了然，是 UDP 服务发全服消息时调用的 goroutine 无法执行结束。
上代码
// Handle 执行 func (t *UdpTransport) Handle(ctx context.Context, addr net.Addr, reader *Reader) { ctx, cancel := context.WithTimeout(ctx, 5*time.Second) defer cancel() ch := make(chan struct{}, 0) go func() { t.run(ctx, addr, reader) ch &amp;lt;- struct{}{} // ERROR 会堵在这 }() select { case &amp;lt;-ch: case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>Golang整数范围</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 12 Nov 2019 10:25:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</guid>
      <description>参考链接 https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1
The germane part:
 Since integer types use two&amp;rsquo;s complement arithmetic, you can infer the min/max constant values for int and uint. For example,
&amp;gt; const MaxUint = ^uint(0) &amp;gt; const MinUint = 0 &amp;gt; const MaxInt = int(MaxUint &amp;gt;&amp;gt; 1) &amp;gt; const MinInt = -MaxInt - 1 &amp;gt; ``` As per @CarelZA&#39;s comment:  golang uint8 : 0 to 255 uint16 : 0 to 65535 uint32 : 0 to 4294967295 uint64 : 0 to 18446744073709551615 int8 : -128 to 127 int16 : -32768 to 32767 int32 : -2147483648 to 2147483647 int64 : -9223372036854775808 to 9223372036854775807 ```</description>
    </item>
    
    <item>
      <title>Golang数组复制</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 07 Nov 2019 10:44:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</guid>
      <description>参考链接 https://www.geeksforgeeks.org/how-to-copy-an-array-into-another-array-in-golang/
// creating a copy of an array by value arr := arr1 // Creating a copy of an array by reference arr := &amp;amp;arr1  两种方式结果不一样，第一种原值不变，第二种会导致原值也跟着改变</description>
    </item>
    
    <item>
      <title>Go比较float</title>
      <link>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</link>
      <pubDate>Thu, 31 Oct 2019 16:11:19 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</guid>
      <description> 直接比较是会有坑，需要进行减去取绝对值的有效范围如
func almostEqual(a, b float64) bool { return math.Abs(a-b) &amp;lt;= 0.001 }   </description>
    </item>
    
    <item>
      <title>Golang 利用 pprof 定位问题</title>
      <link>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 15:40:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</guid>
      <description>在代码中引入 _ &amp;ldquo;net/http/pprof&amp;rdquo; 并监听 http 服务后
通过终端查看 go tool pprof http://127.0.0.1:9191/debug/pprof/heap 通过浏览器查看 http://127.0.0.1:9191/debug/pprof/  </description>
    </item>
    
    <item>
      <title>火焰图</title>
      <link>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:00:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description> 安装 安装基本工具 git clone https://github.com/brendangregg/FlameGraph.git cp flamegraph.pl /usr/local/bin/ flamegraph.pl -h go get -v -u github.com/uber/go-torch go-torch -h brew install graphviz  使用 代码监听 http 服务 _ &amp;quot;net/http/pprof&amp;quot;  压测 # TODO 不同服务不同操作  压测同时获取数据 go-torch -u http://localhost:9191 -t 30  </description>
    </item>
    
  </channel>
</rss>