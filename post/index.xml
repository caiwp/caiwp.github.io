<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Terminal</title>
    <link>https://caiwp.github.io/post/</link>
    <description>Recent content in Posts on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 Apr 2020 17:57:16 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git推送多个仓库</title>
      <link>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 09 Apr 2020 17:57:16 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</guid>
      <description>参考链接 https://segmentfault.com/a/1190000011294144
git remote -v git remote add xxxx http://gogit.oa.com/WenpiCai/sicbo.git git push -u xxxx master  </description>
    </item>
    
    <item>
      <title>快速删除</title>
      <link>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</link>
      <pubDate>Thu, 09 Apr 2020 11:17:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</guid>
      <description>参考链接 https://blog.csdn.net/liuxiao723846/article/details/51626305
1）先建立一个空目录
mkdir/data/blank
2）用rsync删除目标目录
rsync &amp;ndash;delete-before -d /data/blank/ /var/spool/clientmqueue/</description>
    </item>
    
    <item>
      <title>Golang指定时区</title>
      <link>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Tue, 07 Apr 2020 16:54:04 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</guid>
      <description>参考链接 https://stackoverflow.com/questions/27991671/how-to-get-the-current-timestamp-in-other-timezones-in-golang
//init the loc loc, _ := time.LoadLocation(&amp;quot;Asia/Shanghai&amp;quot;) //set timezone, now := time.Now().In(loc)  </description>
    </item>
    
    <item>
      <title>三十多</title>
      <link>https://caiwp.github.io/post/%E4%B8%89%E5%8D%81%E5%A4%9A/</link>
      <pubDate>Tue, 07 Jan 2020 23:08:02 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E4%B8%89%E5%8D%81%E5%A4%9A/</guid>
      <description>三十多 为什么用这个命题，可能是因为时间概念愈发强烈了，感觉就像你即使站在火车尾部，丝毫没阻碍你的前行，倒带一般的回望已往种种，也就嘘嘘一番了。
三十多岁，具体多少不想算也不敢算，因为算得再清楚也只是结果“哦，原来这么多了”。
已经不允许像二十多一样洒脱了，但却又无可奈何地接受，人生进入了又一个压抑自我阶段。身边更多的是90后，现在还只是2020年，所以他们仍未三十。
古人所谓的“三十而立”现今已经行不通了，很多东西觉醒得越快，三十也差不多摸上“不惑”的车票了。有时候感觉懂得越多越难过，毕竟在改变不了环境的时候只好改变自己。
有种感觉自己被磨灭掉希望，一种对于生活与社会的希望，满腔热血这个形容词是什么体会呢？这种感觉相信不只是我一个人的，毕竟我只是平庸之一。金钱社会谁来指明是与非，真是个笑话，还抱有着希望。
预感需要一种信念来支撑，不能只是简单的随波逐流，却有时想要的只是能够跟上时代潮流，避免被淘汰。现在靠着所谓的技术吃饭也不知道还能前行多久，种种社会现象表明并非你不可以，是因为“他们”觉得你不可以了。资本家有钱所以说的都对，只是让你听，不听那你走，多简单的选择题啊。
焦虑，当前这“85”前的领导整天的观念是离开了这里找不到工作了。其实他要不找工作更好，找几个mei老板多好啊，他缺的不是本事，缺的是mei老板。
这是三十多后写的第一篇，记录一个贫瘠的自己。
坚持、努力、方向，送给未来几年的自己，希望回头审视自我时仍有丝丝满足。</description>
    </item>
    
    <item>
      <title>Golang信号发送与接收</title>
      <link>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Fri, 27 Dec 2019 15:37:56 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid>
      <description>参考链接 https://stackoverflow.com/questions/40498371/how-to-send-an-interrupt-signal-in-golang
在需要关闭程序时发送信号
syscall.Kill(syscall.Getpid(), syscall.SIGINT)  接收信号
var stopChan = make(chan os.Signal, 2) signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT) &amp;lt;-stopChan // wait for SIGINT  </description>
    </item>
    
    <item>
      <title>记goroutine泄露</title>
      <link>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Mon, 23 Dec 2019 14:47:34 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>程序说明 监听 TCP 与 UDP 服务，TCP 服务保持客户端长连接，UDP 服务由业务端调用发消息到客户端。
发现问题 通过监控系统发现 goroutine 数量居高不下，正常情况下是一个用户一个 goroutine 才是，明显出现了异常情况。
定位问题 这种情况应该是次 goroutine 泄露现象，需要知道哪个位置导致的。
初步猜测 TCP 连接断开重连导致，翻看日志，看到存在很多高频率重连，只是不符合导致暴涨现象。
回头直接看 goroutine 占用情况，方式 https://caiwp.github.io/post/golang利用pprof定位问题/
原因也就一目了然，是 UDP 服务发全服消息时调用的 goroutine 无法执行结束。
上代码
// Handle 执行 func (t *UdpTransport) Handle(ctx context.Context, addr net.Addr, reader *Reader) { ctx, cancel := context.WithTimeout(ctx, 5*time.Second) defer cancel() ch := make(chan struct{}, 0) go func() { t.run(ctx, addr, reader) ch &amp;lt;- struct{}{} // ERROR 会堵在这 }() select { case &amp;lt;-ch: case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>Mac制作linux启动盘</title>
      <link>https://caiwp.github.io/post/mac%E5%88%B6%E4%BD%9Clinux%E5%90%AF%E5%8A%A8%E7%9B%98/</link>
      <pubDate>Tue, 26 Nov 2019 17:35:32 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mac%E5%88%B6%E4%BD%9Clinux%E5%90%AF%E5%8A%A8%E7%9B%98/</guid>
      <description># 列出并找出盘 diskutil list # 取消挂载 diskutil umountDisk disk4 # 写入 sudo dd if=ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m  </description>
    </item>
    
    <item>
      <title>Golang整数范围</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 12 Nov 2019 10:25:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</guid>
      <description>参考链接 https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1
The germane part:
 Since integer types use two&amp;rsquo;s complement arithmetic, you can infer the min/max constant values for int and uint. For example,
&amp;gt; const MaxUint = ^uint(0) &amp;gt; const MinUint = 0 &amp;gt; const MaxInt = int(MaxUint &amp;gt;&amp;gt; 1) &amp;gt; const MinInt = -MaxInt - 1 &amp;gt; ``` As per @CarelZA&#39;s comment:  golang uint8 : 0 to 255 uint16 : 0 to 65535 uint32 : 0 to 4294967295 uint64 : 0 to 18446744073709551615 int8 : -128 to 127 int16 : -32768 to 32767 int32 : -2147483648 to 2147483647 int64 : -9223372036854775808 to 9223372036854775807 ```</description>
    </item>
    
    <item>
      <title>Golang数组复制</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 07 Nov 2019 10:44:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</guid>
      <description>参考链接 https://www.geeksforgeeks.org/how-to-copy-an-array-into-another-array-in-golang/
// creating a copy of an array by value arr := arr1 // Creating a copy of an array by reference arr := &amp;amp;arr1  两种方式结果不一样，第一种原值不变，第二种会导致原值也跟着改变</description>
    </item>
    
    <item>
      <title>Linux命令sort</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</link>
      <pubDate>Tue, 05 Nov 2019 15:45:00 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</guid>
      <description>参考链接 https://www.cnblogs.com/coderchuanyu/p/4194211.html
忽略相同行使用-u选项或者uniq
只显示单一行： uniq -u file.txt sort file.txt | uniq -u 统计各行在文件中出现的次数： sort file.txt | uniq -c 在文件中找出重复的行： sort file.txt | uniq -d  </description>
    </item>
    
    <item>
      <title>Linux命令awk</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</link>
      <pubDate>Tue, 05 Nov 2019 15:44:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</guid>
      <description>参考链接 https://www.runoob.com/linux/linux-comm-awk.html
每行按空格或TAB分割，输出文本中的1、4项 awk &#39;{print $1,$4}&#39; log.txt 使用&amp;quot;,&amp;quot;分割 awk -F, &#39;{print $1,$2}&#39; log.txt if 条件 awk &#39;{if ($1==1) print &amp;quot;A&amp;quot;; else if ($1==2) print &amp;quot;B&amp;quot;; else print &amp;quot;C&amp;quot;}&#39;  </description>
    </item>
    
    <item>
      <title>Linux命令pkill</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</link>
      <pubDate>Fri, 01 Nov 2019 15:47:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</guid>
      <description>https://man.linuxde.net/pkill
pkill命令可以按照进程名杀死进程。会全部杀掉。
pkill (选项) (参数) -o：仅向找到的最小（起始）进程号发送信号； -n：仅向找到的最大（结束）进程号发送信号； -P：指定父进程号发送信号； -g：指定进程组； -t：指定开启进程的终端。  </description>
    </item>
    
    <item>
      <title>Linux命令pgrep</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</link>
      <pubDate>Fri, 01 Nov 2019 15:30:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</guid>
      <description>https://man.linuxde.net/pgrep
pgrep (选项) (参数) -o：仅显示找到的最小（起始）进程号； -n：仅显示找到的最大（结束）进程号； -l：显示进程名称； -P：指定父进程号； -g：指定进程组； -t：指定开启进程的终端； -u：指定进程的有效用户ID。  </description>
    </item>
    
    <item>
      <title>Mysql创建用户</title>
      <link>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</link>
      <pubDate>Thu, 31 Oct 2019 17:53:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</guid>
      <description>https://www.cnblogs.com/chanshuyi/p/mysql_user_mng.html
创建用户 create user zhangsan identified by &#39;zhangsan&#39;; 开权限 grant all privileges on zhangsanDb.* to zhangsan@&#39;%&#39; identified by &#39;zhangsan&#39;; flush privileges; 查看权限 show grants for &#39;zhangsan&#39;; 更新密码 update mysql.user set password = password(&#39;zhangsannew&#39;) where user = &#39;zhangsan&#39; and host = &#39;%&#39;; flush privileges; 删除用户 drop user zhangsan@&#39;%&#39;;  </description>
    </item>
    
    <item>
      <title>Go比较float</title>
      <link>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</link>
      <pubDate>Thu, 31 Oct 2019 16:11:19 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</guid>
      <description> 直接比较是会有坑，需要进行减去取绝对值的有效范围如
func almostEqual(a, b float64) bool { return math.Abs(a-b) &amp;lt;= 0.001 }   </description>
    </item>
    
    <item>
      <title>Golang 利用 pprof 定位问题</title>
      <link>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 15:40:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</guid>
      <description>在代码中引入 _ &amp;ldquo;net/http/pprof&amp;rdquo; 并监听 http 服务后
通过终端查看 go tool pprof http://127.0.0.1:9191/debug/pprof/heap 通过浏览器查看 http://127.0.0.1:9191/debug/pprof/  </description>
    </item>
    
    <item>
      <title>树莓派</title>
      <link>https://caiwp.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:24:24 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</guid>
      <description> 连接隐藏wifi网络 https://blog.csdn.net/Tang_Chuanlin/article/details/87802830
vi /etc/wpa_supplicant/wpa_supplicant.conf 在文件底部添加： network={ ssid=”wifi_name” scan_ssid=1 psk=”wifi_password” } 关键是ssid_scan=1这一句，加上后才能扫描到隐藏的wifi网络。之后保存退出（ctrl+o保存，ctrl+x退出）nano编辑器，reboot重启即可。  源 (可忽视) https://blog.csdn.net/qq_41589031/article/details/83058095
vi /etc/apt/sources.list deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi vi /etc/apt/sources.list.d/raspi.list deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main  sshd https://blog.csdn.net/qq813480700/article/details/71597808
/etc/init.d/ssh start 在终端命令行中启动SSH服务后，如果系统重启或关机后启动，SSH服务默认是关闭的，依然需要手动启动，为了方便可以设置SSH服务开机自动启动，打开/etc/rc.local文件，在语句exit 0之前加入： /etc/init.d/ssh start  zsh https://mlapp.cn/310.html
sudo apt-get install zsh cd ~ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh  </description>
    </item>
    
    <item>
      <title>火焰图</title>
      <link>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:00:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description> 安装 安装基本工具 git clone https://github.com/brendangregg/FlameGraph.git cp flamegraph.pl /usr/local/bin/ flamegraph.pl -h go get -v -u github.com/uber/go-torch go-torch -h brew install graphviz  使用 代码监听 http 服务 _ &amp;quot;net/http/pprof&amp;quot;  压测 # TODO 不同服务不同操作  压测同时获取数据 go-torch -u http://localhost:9191 -t 30  </description>
    </item>
    
    <item>
      <title>搭建博客</title>
      <link>https://caiwp.github.io/post/hello/</link>
      <pubDate>Tue, 29 Oct 2019 23:56:28 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/hello/</guid>
      <description>Hello world! 步骤操作 参考 https://mogeko.me/2018/018/
配置文件 baseurl = &amp;quot;https://caiwp.github.io&amp;quot; languageCode = &amp;quot;zh-cn&amp;quot; theme = &amp;quot;terminal&amp;quot; # https://github.com/panr/hugo-theme-terminal/ paginate = 10 preserveTaxonomyNames = true publishDir = &amp;quot;../caiwp.github.io&amp;quot; [Permalinks] posts = &amp;quot;/:year/:filename/&amp;quot; [params] contentTypeName = &amp;quot;post&amp;quot; # [&amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;pink&amp;quot;] themeColor = &amp;quot;orange&amp;quot; showMenuItems = 1 showLanguageSelector = false fullWidthTheme = false centerTheme = true [languages] [languages.en] languageName = &amp;quot;English&amp;quot; title = &amp;quot;Terminal&amp;quot; subtitle = &amp;quot;My blog&amp;quot; keywords = &amp;quot;&amp;quot; copyright = &amp;quot;&amp;quot; menuMore = &amp;quot;Show more&amp;quot; readMore = &amp;quot;Read more&amp;quot; readOtherPosts = &amp;quot;Read other posts&amp;quot; [languages.</description>
    </item>
    
  </channel>
</rss>