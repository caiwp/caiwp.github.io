<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal</title>
    <link>https://caiwp.github.io/</link>
    <description>Recent content on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 07 Dec 2021 22:00:22 +0800</lastBuildDate>
    
	<atom:link href="https://caiwp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>再会</title>
      <link>https://caiwp.github.io/post/%E5%86%8D%E4%BC%9A/</link>
      <pubDate>Tue, 07 Dec 2021 22:00:22 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%86%8D%E4%BC%9A/</guid>
      <description>再过三天就要结束深圳之旅了，大部分家当在上周末已转移，望着寥落的房间，些许回味。
谢谢老司机的晚餐，说实在的这晚餐让我意外不少，毕竟这是领导的送行饭。一路骑车回来也就难得多想，想想这三年多快四年的曾经。因为只是回忆，所以还是受到当下情绪影响，或者说年纪大了的特征。
从面的go，收的客户端offer再入职php开发，这是印象最深刻，因为毕竟挺有意思的。就工作内容而言，已经进入了舒适圈，从php到go，从业务到server，也有些时间了。回想当初第一个go写的tcp服务上线后，面对异常时的紧张感。各种小服务小游戏也写了不少，在翻交接资料时发现上线用的还是有一些，价值还是有所体现了。这过程不得不感谢领导的包容，允许我的各种尝试，因为即使再小心也免不了会有出错的时候。能留下来的也就日常面对的代码了，希望后人少些抱怨多些包容，毕竟无法尽善尽美。
对于深圳，虽然有三年之久相处，但还是保留着那份陌生，也许因为我也只是众多过客之一，也许我就没想过探索，也许我还是与之无缘。接下来回广州，来年也就到了毕业的第十年，恍惚间没法抗拒如何。回广州主要一因素还是家庭，娃一个多月时举家来到深圳，跑了不少次HK带奶粉，连现在码的笔记本也是从那带回来的。娃成长了，我也就不得不父亲角色进入。这方面还是不写太多了，免得打脸。
开成问我离开是什么感觉，我没直接回答，只是说到时你就知道了，是的他比我还早进半年多呢。不过我还是劝他别有这个念头，毕竟DDDD。离开舒适圈去再次面临陌生或陌生，难免有紧张感，面对挑战，不忘初心。
高中同学跑步四人团就要缺席了，从一开始跑一圈走两圈到后来的一次性跑完三圈，成就感满满。
江湖不大，有缘再见。</description>
    </item>
    
    <item>
      <title>Golang内存占用检测</title>
      <link>https://caiwp.github.io/post/golang%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Thu, 14 Jan 2021 10:13:40 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E6%A3%80%E6%B5%8B/</guid>
      <description>Golang 内存占用检测 参考链接 https://lrita.github.io/2017/05/26/golang-memory-pprof/
涉及命令 go tool pprof http://{host}/debug/pprof/heap
缘由 同样的服务在上了多组服务器后监控显示内存 process_resident_memory_bytes 区别很大，多组服务会根据实际连接和用户情况增减，但有一组数值仍然居高不下，数据对比就是20+M和50+M。以下便找出两台作为对比定位原因。{host1}为需要检测的服务。
命令使用 通过 go tool pprof http://{host}/debug/pprof/heap 进入查看命令行，直接输入 top 后
[WenpiCai@LOCAL-192-168-97-55 ~]$ go tool pprof http://{host1}/debug/pprof/heap Fetching profile over HTTP from http://{host1}/debug/pprof/heap Saved profile in /home/WenpiCai/pprof/pprof.MoziGateA.alloc_objects.alloc_space.inuse_objects.inuse_space.006.pb.gz File: MoziGateA Type: inuse_space Time: Jan 14, 2021 at 10:26am (CST) Entering interactive mode (type &amp;quot;help&amp;quot; for commands, &amp;quot;o&amp;quot; for options) (pprof) top Showing nodes accounting for 5524.47kB, 100% of 5524.47kB total Showing top 10 nodes out of 41 flat flat% sum% cum cum% 1542.</description>
    </item>
    
    <item>
      <title>小游戏重构之路</title>
      <link>https://caiwp.github.io/post/%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Mon, 09 Nov 2020 17:40:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/</guid>
      <description> 小游戏重构之路  记录一下重构小游戏过程中的体会。 重构开发语言 Golang，额外涉及开发语言PHP，C++  前景  接手小游戏重构有骰宝、大菠萝、夺宝奇兵，虽然各种原因没有上线，或上线验证后出现问题暂停上线状态。 轻量支撑服务有小喇叭、大厅代理层，已上线正常使用。 只是服务端部分重构。  场景 重构缘由  服务老化，维护成本大。稳定的项目没人愿意去调整，大部分时间就处理搁置状态了，只是个别时候在需要加点东西的时候就麻烦来了。可能这个项目的核心用了好几年前的一个技术，如 swoole 1.8.x 版本，某些时间要解决问题只能使用绝招“重启大法”。能用可用，但难以维护这样的状态。 折腾心理。某些时候需求不饱和前提下，就闲得慌蛋疼，想整点东西，而能为现有项目提供价值是更好了。 学习目的。站在巨人肩膀上可望得更远，虽然攀登过程需要披荆斩棘。  开发语言  做为PHP出身的程序员难免不想囚困于web领域。 Golang 能让我体会到开发过程中的轻松感。 大部分时间都处于自撸项目，所以不需要见识千奇百怪的代码风格，毕竟项目的复杂度就是因人而生。有人的地方就有江湖！！！ 自知 C++ 只能读出思路的程度。  历程 读 因为不是从0到1，所以必须基于原有的套路上进行，毕竟纯粹的服务端重构，需要保证与客户端的数据一致性。
整个历程里面这部分是最难受的，项目一般年久失修，可能仅有原有源码。这部分也是最耗时的，虽然有的服务眼看是只有几个功能如下注、结算、发奖，但数据是不会撒谎，数据有出入那结果就异常。
最重要的是需要一颗包容的心，骂x多了难免麻木。话虽如此，意仍难平，江湖如此，身不由已！
写 Golang 的优势就是轻量，不用像 PHP 那样凡事先搬出个框架，不过服务写得多了也会自成框架。框架模型元素大体整理有
 入口，服务端、客户端等。 功能模块，日志、配置、指标、DB、缓存、基于自有协议服务客户端如用户、上报等。 业务逻辑，路由控制，具体实现。 脚本，编译、发布等  试 不喜欢等所有东西都实现了才进行测试，没那耐心，一般测试难免存在遗漏，亡羊补牢即使能管用但肯定会痛苦。拆分化开发和测试，有坑早点填，也趁早安心。
此外，重构都是换语言进行，不同语言开发思路差异化还是很大的。如果进行直翻，那简直就是种了棵树苗在心口，一时间不起眼就吸引掉所有阳光，眼望它在那灿烂。
问题 语言 换语言重构最大问题就在于尽可能的使用适合的方式，Go、PHP、C++ 三个不必进行比较，道路千万条，适合了才会舒服。
Go 小游戏基本上数据都是有状态的，当 goroutine 不受约束，惊喜就会不期而至，必须心怀敬畏啊。
意义 </description>
    </item>
    
    <item>
      <title>Redis源码翻阅记录</title>
      <link>https://caiwp.github.io/post/redis%E6%BA%90%E7%A0%81%E7%BF%BB%E9%98%85%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 16 Jul 2020 11:01:18 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/redis%E6%BA%90%E7%A0%81%E7%BF%BB%E9%98%85%E8%AE%B0%E5%BD%95/</guid>
      <description>准备工作 源码 仓库 https://github.com/antirez/redis.git 分支 git:remotes/origin/6.0 git clone -b 6.0 https://github.com/redis/redis.git  工具 Vim 优点：阅读内容一目了然，只键盘操作快捷。劣势：跳转较弱，会占用终端，用tmux来解决阅读节点，但感觉容易混淆。（刚开始选择） VS Code 优点：插件较自动化，跳转轻松。劣势：outline无法右边显示，触摸板翻页感觉容易失焦点。（最终选择）  阶段一 粗读  代码目录结构整理。目标：清楚整体项目，便于后面阅读定位。
 重点 src 目录下所有文件草读。目标：清楚文件定位，内容大致情况，得出文件重要程度，便于后面阅读重点。
  结论 大体应该有以下几块： 事件 配置 数据类型：对外支持的，底层实现的。（大量代码） 网络 集群 哨兵 数据持久化 日记 服务端入口 src/server.c (突破口) 客户端入口 src/redis-cli.c  阶段二 src/server.c initServerConfig serverCron 定时任务 beforeSleep afterSleep restartServer 做好收尾工作，另执行启动，退出 listenToPort 监听TCP服务 initServer sigShutdownHandler 监听信号关闭操作 adjustOpenFilesLimit InitServerLast 启动多线程，每个客户端独自线程监听连接，获取请求，找到命令，调用命令。 call 执行客户端的具体命令 processCommand 分发客户端命令  阶段三 发现新版里面用上了多线程，查了一下是4.0版本后引入，决定拉回3.2版本代码进行比较。</description>
    </item>
    
    <item>
      <title>Linux命令nc</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4nc/</link>
      <pubDate>Thu, 09 Jul 2020 14:49:21 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4nc/</guid>
      <description>参考链接
https://www.ifmicro.com/记录/2017/12/12/netcat-usage/
https://www.runoob.com/linux/linux-comm-nc.html
# 端口扫描 nc 127.0.0.1 -z 9320-9330  </description>
    </item>
    
    <item>
      <title>Mac启动k8s</title>
      <link>https://caiwp.github.io/post/mac%E5%90%AF%E5%8A%A8k8s/</link>
      <pubDate>Fri, 03 Jul 2020 16:06:33 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mac%E5%90%AF%E5%8A%A8k8s/</guid>
      <description> 参考链接 https://juejin.im/post/5d87980f5188253f74438bb6
启动 docker mac desktop 已经自带 k8s，设置成启动就可。
web 查看dashboard https://github.com/kubernetes/dashboard
# 查看 token 用于登录 kubectl -n kube-system describe secret default| awk &#39;$1==&amp;quot;token:&amp;quot;{print $2}&#39;  </description>
    </item>
    
    <item>
      <title>Sed命令</title>
      <link>https://caiwp.github.io/post/sed%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 08 May 2020 15:20:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/sed%E5%91%BD%E4%BB%A4/</guid>
      <description>参考链接 https://www.runoob.com/linux/linux-comm-sed.html
直接替换文件内容 sed -i &#39;s/108/581/g&#39; *.json 在每行的头添加字符，比如&amp;quot;HEAD&amp;quot;，命令如下： sed &#39;s/^/HEAD&amp;amp;/g&#39; test.file 在每行的行尾添加字符，比如“TAIL”，命令如下： sed &#39;s/$/&amp;amp;TAIL/g&#39; test.file 替换第2个值 sed -i &#39;s/108/581/2&#39; test.sh  </description>
    </item>
    
    <item>
      <title>Git提交规范</title>
      <link>https://caiwp.github.io/post/git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</link>
      <pubDate>Wed, 22 Apr 2020 17:54:52 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/git%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</guid>
      <description>参考链接 https://juejin.im/post/5afc5242f265da0b7f44bee4
type: commit 的类型 feat: 新特性 fix: 修改问题 refactor: 代码重构 docs: 文档修改 style: 代码格式修改, 注意不是 css 修改 test: 测试用例修改 chore: 其他修改, 比如构建流程, 依赖管理. scope: commit 影响的范围, 比如: route, component, utils, build... subject: commit 的概述, 建议符合 [50/72 formatting](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting) body: commit 具体修改内容, 可以分为多行, 建议符合 [50/72 formatting](https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting) footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.  </description>
    </item>
    
    <item>
      <title>Goroutine请求TCP返回读取问题</title>
      <link>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 17 Apr 2020 15:16:48 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/goroutine%E8%AF%B7%E6%B1%82tcp%E8%BF%94%E5%9B%9E%E8%AF%BB%E5%8F%96%E9%97%AE%E9%A2%98/</guid>
      <description>场景：
0、本服务是一个 TCP 服务监听接收请求 1、需要与某个远程服务建立 TCP 连接。 2、建立唯一的客户端C并保持连接。 3、多个请求与本服务建立 TCP 连接产生多个 goroutine。 4、当 goroutine 需要涉及到远程服务调用客户端C进行 Write 和 Read 操作。每个应当是独立不干扰的。 5、出现 Read 操作时数据并不按预期返回，随着 goroutine 数量增多出现概率变大。  定位问题：应该是多goroutine并发读取socket缓冲区数据导致。
解决：
A、设想通过 channel 来避免并发。复杂度增加，需要对应将结果与请求对应，并且个别地方是阻塞请求。 B、加锁控制。简单粗暴，加好超时控制避免死锁情况。  </description>
    </item>
    
    <item>
      <title>Git推送多个仓库</title>
      <link>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 09 Apr 2020 17:57:16 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/git%E6%8E%A8%E9%80%81%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</guid>
      <description>参考链接 https://segmentfault.com/a/1190000011294144
git remote -v git remote add xxxx http://gogit.oa.com/WenpiCai/sicbo.git git push -u xxxx master  </description>
    </item>
    
    <item>
      <title>快速删除</title>
      <link>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</link>
      <pubDate>Thu, 09 Apr 2020 11:17:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4/</guid>
      <description>参考链接 https://blog.csdn.net/liuxiao723846/article/details/51626305
1）先建立一个空目录
mkdir/data/blank
2）用rsync删除目标目录
rsync &amp;ndash;delete-before -d /data/blank/ /var/spool/clientmqueue/</description>
    </item>
    
    <item>
      <title>Golang指定时区</title>
      <link>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Tue, 07 Apr 2020 16:54:04 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%8C%87%E5%AE%9A%E6%97%B6%E5%8C%BA/</guid>
      <description>参考链接 https://stackoverflow.com/questions/27991671/how-to-get-the-current-timestamp-in-other-timezones-in-golang
//init the loc loc, _ := time.LoadLocation(&amp;quot;Asia/Shanghai&amp;quot;) //set timezone, now := time.Now().In(loc)  </description>
    </item>
    
    <item>
      <title>Golang信号发送与接收</title>
      <link>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</link>
      <pubDate>Fri, 27 Dec 2019 15:37:56 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E4%BF%A1%E5%8F%B7%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</guid>
      <description>参考链接 https://stackoverflow.com/questions/40498371/how-to-send-an-interrupt-signal-in-golang
在需要关闭程序时发送信号
syscall.Kill(syscall.Getpid(), syscall.SIGINT)  接收信号
var stopChan = make(chan os.Signal, 2) signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM, syscall.SIGINT) &amp;lt;-stopChan // wait for SIGINT  </description>
    </item>
    
    <item>
      <title>记goroutine泄露</title>
      <link>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Mon, 23 Dec 2019 14:47:34 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E8%AE%B0goroutine%E6%B3%84%E9%9C%B2/</guid>
      <description>程序说明 监听 TCP 与 UDP 服务，TCP 服务保持客户端长连接，UDP 服务由业务端调用发消息到客户端。
发现问题 通过监控系统发现 goroutine 数量居高不下，正常情况下是一个用户一个 goroutine 才是，明显出现了异常情况。
定位问题 这种情况应该是次 goroutine 泄露现象，需要知道哪个位置导致的。
初步猜测 TCP 连接断开重连导致，翻看日志，看到存在很多高频率重连，只是不符合导致暴涨现象。
回头直接看 goroutine 占用情况，方式 https://caiwp.github.io/post/golang利用pprof定位问题/
原因也就一目了然，是 UDP 服务发全服消息时调用的 goroutine 无法执行结束。
上代码
// Handle 执行 func (t *UdpTransport) Handle(ctx context.Context, addr net.Addr, reader *Reader) { ctx, cancel := context.WithTimeout(ctx, 5*time.Second) defer cancel() ch := make(chan struct{}, 0) go func() { t.run(ctx, addr, reader) ch &amp;lt;- struct{}{} // ERROR 会堵在这 }() select { case &amp;lt;-ch: case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>Mac制作linux启动盘</title>
      <link>https://caiwp.github.io/post/mac%E5%88%B6%E4%BD%9Clinux%E5%90%AF%E5%8A%A8%E7%9B%98/</link>
      <pubDate>Tue, 26 Nov 2019 17:35:32 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mac%E5%88%B6%E4%BD%9Clinux%E5%90%AF%E5%8A%A8%E7%9B%98/</guid>
      <description># 列出并找出盘 diskutil list # 取消挂载 diskutil umountDisk disk4 # 写入 sudo dd if=ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m  </description>
    </item>
    
    <item>
      <title>Golang整数范围</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Tue, 12 Nov 2019 10:25:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4/</guid>
      <description>参考链接 https://stackoverflow.com/questions/6878590/the-maximum-value-for-an-int-type-in-go
https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1
The germane part:
 Since integer types use two&amp;rsquo;s complement arithmetic, you can infer the min/max constant values for int and uint. For example,
&amp;gt; const MaxUint = ^uint(0) &amp;gt; const MinUint = 0 &amp;gt; const MaxInt = int(MaxUint &amp;gt;&amp;gt; 1) &amp;gt; const MinInt = -MaxInt - 1 &amp;gt; ``` As per @CarelZA&#39;s comment:  golang uint8 : 0 to 255 uint16 : 0 to 65535 uint32 : 0 to 4294967295 uint64 : 0 to 18446744073709551615 int8 : -128 to 127 int16 : -32768 to 32767 int32 : -2147483648 to 2147483647 int64 : -9223372036854775808 to 9223372036854775807 ```</description>
    </item>
    
    <item>
      <title>Golang数组复制</title>
      <link>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Thu, 07 Nov 2019 10:44:54 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E6%95%B0%E7%BB%84%E5%A4%8D%E5%88%B6/</guid>
      <description>参考链接 https://www.geeksforgeeks.org/how-to-copy-an-array-into-another-array-in-golang/
// creating a copy of an array by value arr := arr1 // Creating a copy of an array by reference arr := &amp;amp;arr1  两种方式结果不一样，第一种原值不变，第二种会导致原值也跟着改变</description>
    </item>
    
    <item>
      <title>Linux命令sort</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</link>
      <pubDate>Tue, 05 Nov 2019 15:45:00 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4sort/</guid>
      <description>参考链接 https://www.cnblogs.com/coderchuanyu/p/4194211.html
忽略相同行使用-u选项或者uniq
只显示单一行： uniq -u file.txt sort file.txt | uniq -u 统计各行在文件中出现的次数： sort file.txt | uniq -c 在文件中找出重复的行： sort file.txt | uniq -d  </description>
    </item>
    
    <item>
      <title>Linux命令awk</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</link>
      <pubDate>Tue, 05 Nov 2019 15:44:55 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4awk/</guid>
      <description>参考链接 https://www.runoob.com/linux/linux-comm-awk.html
每行按空格或TAB分割，输出文本中的1、4项 awk &#39;{print $1,$4}&#39; log.txt 使用&amp;quot;,&amp;quot;分割 awk -F, &#39;{print $1,$2}&#39; log.txt if 条件 awk &#39;{if ($1==1) print &amp;quot;A&amp;quot;; else if ($1==2) print &amp;quot;B&amp;quot;; else print &amp;quot;C&amp;quot;}&#39;  </description>
    </item>
    
    <item>
      <title>Linux命令pkill</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</link>
      <pubDate>Fri, 01 Nov 2019 15:47:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pkill/</guid>
      <description>https://man.linuxde.net/pkill
pkill命令可以按照进程名杀死进程。会全部杀掉。
pkill (选项) (参数) -o：仅向找到的最小（起始）进程号发送信号； -n：仅向找到的最大（结束）进程号发送信号； -P：指定父进程号发送信号； -g：指定进程组； -t：指定开启进程的终端。  </description>
    </item>
    
    <item>
      <title>Linux命令pgrep</title>
      <link>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</link>
      <pubDate>Fri, 01 Nov 2019 15:30:37 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/linux%E5%91%BD%E4%BB%A4pgrep/</guid>
      <description>https://man.linuxde.net/pgrep
pgrep (选项) (参数) -o：仅显示找到的最小（起始）进程号； -n：仅显示找到的最大（结束）进程号； -l：显示进程名称； -P：指定父进程号； -g：指定进程组； -t：指定开启进程的终端； -u：指定进程的有效用户ID。  </description>
    </item>
    
    <item>
      <title>Mysql创建用户</title>
      <link>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</link>
      <pubDate>Thu, 31 Oct 2019 17:53:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</guid>
      <description>https://www.cnblogs.com/chanshuyi/p/mysql_user_mng.html
创建用户 create user zhangsan identified by &#39;zhangsan&#39;; 开权限 grant all privileges on zhangsanDb.* to zhangsan@&#39;%&#39; identified by &#39;zhangsan&#39;; flush privileges; 查看权限 show grants for &#39;zhangsan&#39;; 更新密码 update mysql.user set password = password(&#39;zhangsannew&#39;) where user = &#39;zhangsan&#39; and host = &#39;%&#39;; flush privileges; 删除用户 drop user zhangsan@&#39;%&#39;;  </description>
    </item>
    
    <item>
      <title>Go比较float</title>
      <link>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</link>
      <pubDate>Thu, 31 Oct 2019 16:11:19 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/go%E6%AF%94%E8%BE%83float/</guid>
      <description> 直接比较是会有坑，需要进行减去取绝对值的有效范围如
func almostEqual(a, b float64) bool { return math.Abs(a-b) &amp;lt;= 0.001 }   </description>
    </item>
    
    <item>
      <title>Golang 利用 pprof 定位问题</title>
      <link>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 15:40:45 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/golang%E5%88%A9%E7%94%A8pprof%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98/</guid>
      <description>在代码中引入 _ &amp;ldquo;net/http/pprof&amp;rdquo; 并监听 http 服务后
通过终端查看 go tool pprof http://127.0.0.1:9191/debug/pprof/heap 通过浏览器查看 http://127.0.0.1:9191/debug/pprof/  </description>
    </item>
    
    <item>
      <title>树莓派</title>
      <link>https://caiwp.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:24:24 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE/</guid>
      <description> 连接隐藏wifi网络 https://blog.csdn.net/Tang_Chuanlin/article/details/87802830
vi /etc/wpa_supplicant/wpa_supplicant.conf 在文件底部添加： network={ ssid=”wifi_name” scan_ssid=1 psk=”wifi_password” } 关键是ssid_scan=1这一句，加上后才能扫描到隐藏的wifi网络。之后保存退出（ctrl+o保存，ctrl+x退出）nano编辑器，reboot重启即可。  源 (可忽视) https://blog.csdn.net/qq_41589031/article/details/83058095
vi /etc/apt/sources.list deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi vi /etc/apt/sources.list.d/raspi.list deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main  sshd https://blog.csdn.net/qq813480700/article/details/71597808
/etc/init.d/ssh start 在终端命令行中启动SSH服务后，如果系统重启或关机后启动，SSH服务默认是关闭的，依然需要手动启动，为了方便可以设置SSH服务开机自动启动，打开/etc/rc.local文件，在语句exit 0之前加入： /etc/init.d/ssh start  zsh https://mlapp.cn/310.html
sudo apt-get install zsh cd ~ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh  </description>
    </item>
    
    <item>
      <title>火焰图</title>
      <link>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Wed, 30 Oct 2019 15:00:30 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description> 安装 安装基本工具 git clone https://github.com/brendangregg/FlameGraph.git cp flamegraph.pl /usr/local/bin/ flamegraph.pl -h go get -v -u github.com/uber/go-torch go-torch -h brew install graphviz  使用 代码监听 http 服务 _ &amp;quot;net/http/pprof&amp;quot;  压测 # TODO 不同服务不同操作  压测同时获取数据 go-torch -u http://localhost:9191 -t 30  </description>
    </item>
    
    <item>
      <title>搭建博客</title>
      <link>https://caiwp.github.io/post/hello/</link>
      <pubDate>Tue, 29 Oct 2019 23:56:28 +0800</pubDate>
      
      <guid>https://caiwp.github.io/post/hello/</guid>
      <description>Hello world! 步骤操作 参考 https://mogeko.me/2018/018/
配置文件 baseurl = &amp;quot;https://caiwp.github.io&amp;quot; languageCode = &amp;quot;zh-cn&amp;quot; theme = &amp;quot;terminal&amp;quot; # https://github.com/panr/hugo-theme-terminal/ paginate = 10 preserveTaxonomyNames = true publishDir = &amp;quot;../caiwp.github.io&amp;quot; [Permalinks] posts = &amp;quot;/:year/:filename/&amp;quot; [params] contentTypeName = &amp;quot;post&amp;quot; # [&amp;quot;orange&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;pink&amp;quot;] themeColor = &amp;quot;orange&amp;quot; showMenuItems = 1 showLanguageSelector = false fullWidthTheme = false centerTheme = true [languages] [languages.en] languageName = &amp;quot;English&amp;quot; title = &amp;quot;Terminal&amp;quot; subtitle = &amp;quot;My blog&amp;quot; keywords = &amp;quot;&amp;quot; copyright = &amp;quot;&amp;quot; menuMore = &amp;quot;Show more&amp;quot; readMore = &amp;quot;Read more&amp;quot; readOtherPosts = &amp;quot;Read other posts&amp;quot; [languages.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://caiwp.github.io/about/</link>
      <pubDate>Tue, 29 Oct 2019 23:35:13 +0800</pubDate>
      
      <guid>https://caiwp.github.io/about/</guid>
      <description>Hello world! https://github.com/caiwp</description>
    </item>
    
  </channel>
</rss>